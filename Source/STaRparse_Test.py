#!/usr/bin/env python3
""" "@author: dannear """
#import sys, argparse, pandas as pd, glob, os, vcf, datetime, sqlalchemy, shlex, subprocess, random
import sys, argparse, glob, datetime, sqlalchemy, random, subprocess
sys.path.insert(1, "/home/dannear/STaRparse/bin/Source/Scripts/csvmerge")
sys.path.insert(1, "/home/dannear/STaRparse/bin/Source/Scripts/vcfparse")

class STaRparse(object):

    def __init__(self):
        parser = argparse.ArgumentParser(
            description='Tool for managing data generated by STR genotyping tools',
            usage='''STaRparse <command> [<args>]

The avaialble commands are:
    vcfparse    Collects relevant data from VCF files.
    csvmerge    Merges CSV tables generated by vcfparse.
    summaries   Summarizes data generated by vcfparse.
''')
        parser.add_argument('command', help='Subcommand to run')
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        getattr(self, args.command)()

    def vcfparse(self):
        parser = argparse.ArgumentParser(description='Select VCF directory and STR genotyper.')
        parser.add_argument('STR_Genotyper', choices=['E','G','L'], metavar="", help='E (ExpansionHunter), G (GangSTR), or L (lobSTR))')
        parser.add_argument('-i', '--vcfinput', type=str, metavar="", required=True, help='VCF Input File Path')
        parser.add_argument('-o', '--output', type=str, metavar="", nargs="?", const="/home/dannear/STaRparse/Default_Output", required=False, help='CSV Output File Path')
        parser.add_argument('-db', '--database', type=str, metavar="", required=False, help='Enter Database Name')
        args = parser.parse_args(sys.argv[2:])

        #           DEFINE VCF_to_CSV_to_DB SCRIPT
        def to_DB(df, dbname, out_code):
        #           EXPORT TO DATABASE AND CSV
            print("###############     EXPORTING TO DATABASE    ###############")
            engine = sqlalchemy.create_engine("mysql+pymysql://dannear:3vVrnhJ3@143.169.238.18/dannear")
            df.to_sql("CGG_Repeats_"+dbname+"_"+out_code, engine, if_exists='replace', index=False)

        def Output(vcf_data, out_code, output, db):
            vcf_data.to_csv(output+"CGG_Repeats_"+db+"_"+out_code+".csv", sep=',', index=None, header=True)
            if db != "":
                to_DB(vcf_data, db, out_code)
            else:
                print("WARNING: \t VCF data will not be exported to a database. No database was specified.")
            print("###############     COMPLETE     ###############")
            print("Output CSV file can be found at: "+output+"CGG_Repeats_"+db+"_"+out_code+".csv")

        if args.output[-1] != "/":
            args.output += "/"
        if args.vcfinput[-1] != "/":
            args.vcfinput += "/"
        out_code = "".join([str(datetime.datetime.today().strftime('%Y-%m-%d')), "_", str(random.randint(1,10000))])
        files = glob.glob(args.vcfinput+'*.vcf')

        if files == []:
            print("WARNING: \t No VCF files were found at the specified directory.")
            exit(1)
        else:
            print(files)
            if args.database is None:
                db = ""
            else:
                db = args.database

        if args.STR_Genotyper == "E":
            out_code = "ExpansionHunter_" + out_code
            from From_ExpansionHunter import ExpansionHunter
            vcf_data = ExpansionHunter(files, out_code)
        if args.STR_Genotyper == "G":
            out_code = "GangSTR_" + out_code
            from From_GangSTR import GangSTR
            vcf_data = GangSTR(files, out_code)
        Output(vcf_data, out_code, args.output, db)

    def csvmerge(self):
        parser = argparse.ArgumentParser(description='Merge CSV files containnig ExpansionHunter and GangSTR data')
        parser.add_argument('-e', '--expansionhuntercsv', type=str, metavar="", required=True, help='ExpansionHunter CSV file path')
        parser.add_argument('-g', '--gangstrcsv', type=str, metavar="", required=True, help='GangSTR CSV file path')
        parser.add_argument('-o', '--outputcsv', type=str, metavar="", required=True, help='Output CSV file path')
        args = parser.parse_args(sys.argv[2:])

        path2script1 = '/home/dannear/STaRparse/bin/Source/Scripts/csvmerge/CSV_Merge_Consensus.R'
        arguments = [args.expansionhuntercsv, args.gangstrcsv, args.outputcsv]
        cmd = ['Rscript', path2script1] + arguments
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        p.stdout.read()

        print("Output CSV files can be found at: " + args.outputcsv + "_merged.csv & " + args.outputcsv + "_consensus.csv")

        print("###############     CSV MERGING COMPLETE     ###############")

    def summaries(self):
        parser = argparse.ArgumentParser(description='Summarise data stored in CSV Files')
        parser.add_argument('Summary', choices=['All','Locus','Sample', 'Chr', 'Ratio'], metavar="", help='Summerize by: All, Locus, Sample, Chr, or Ratio)')
        parser.add_argument('-i', '--csvinput', type=str, metavar="", required=True, help='Input CSV file path')
        parser.add_argument('-o', '--summaryoutput', type=str, metavar="", required=True, help='Summary output file path')
        args = parser.parse_args(sys.argv[2:])

        if args.Summary == "ALL":
            for c in args.Summary.choices:
                path2script = '/home/dannear/STaRparse/bin/Source/Scripts/summaries/by_Locus.R'
                arguments = [args.csvinput, args.summaryoutput]
                cmd = ['Rscript', path2script] + arguments

        if args.Summary == "Locus":
            path2script = '/home/dannear/STaRparse/bin/Source/Scripts/summaries/by_Locus.R'
            arguments = [args.csvinput, args.summaryoutput]
            cmd = ['Rscript', path2script] + arguments

        p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        print(p.stdout.read())

        print(args)


if __name__ == '__main__':
    STaRparse()